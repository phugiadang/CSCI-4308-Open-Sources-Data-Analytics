#!/usr/bin/env node
// Render a Vega specification to PNG, using node canvas

var helpText =
  'Render a Vega-lite specification to PNG.\n\n' +
  'Usage: vl2png vega_lite_json_file [output_png_file]\n' +
  '  If output_png_file is not provided, writes to stdout.\n\n' +
  'To load data, you may need to set a base directory:\n' +
  '  For web retrieval, use `-b http://host/data/`. \n' +
  '  For files, use `-b file:///dir/data/` (absolute) or `-b data/` (relative).';

// import required libraries
var path = require('path'),
    fs = require('fs'),
    vl = require('../vega-lite.js'),
    vg = require('vega');

// arguments
var args = require('yargs')
  .usage(helpText)
  .demand(1)
  .string('b').alias('b', 'base')
  .describe('b', 'Base directory for data loading.')
  .argv;

// set baseURL if provided on command line
var base = 'file://' + process.cwd() + path.sep;
if (args.b) {
  // if no protocol, assume files, relative to current dir
  base = /^[A-Za-z]+\:\/\//.test(args.b) ? args.b + path.sep
    : 'file://' + process.cwd() + path.sep + args.b + path.sep;
}
vg.config.load.baseURL = base;

// input / output files
var specFile = args._[0],
    outputFile = args._[1] || null;

// load spec, render to png
fs.readFile(specFile, 'utf8', function(err, text) {
  if (err) throw err;
  var vlSpec = JSON.parse(text);
  var vgSpec = vl.compile(vlSpec).spec;
  render(vgSpec);
});

// ---

function writePNG(canvas, file) {
  var out = file ? fs.createWriteStream(file) : process.stdout;
  var stream = canvas.createPNGStream();
  stream.on('data', function(chunk) { out.write(chunk); });
}

function render(spec) {
  vg.parse.spec(spec, function(err, chart) {
    if (err) { throw err; }

    var view = chart({ renderer: 'canvas' })
      .update();

    view.canvasAsync(function(canvas) {
      writePNG(canvas, outputFile);
    });
  });
}